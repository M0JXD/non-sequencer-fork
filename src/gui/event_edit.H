//
// Copyright (C) 2008 Jonathan Moore Liles
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef event_edit_H
#define event_edit_H
#include <FL/Fl.H>
#include <MIDI/event.H>
#include <MIDI/event_list.H>
class Event_Widget;
#include <FL/Fl_Double_Window.H>
#include "event_edit.H"
#include "../grid.H"
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Menu_Button.H>

class Event_Editor {
  int _h; 
  Grid *_grid; 
  MIDI::event_list *_old; 
  MIDI::event_list *_el; 
  int _y; 
public:
  Fl_Double_Window* make_window( Grid *g );
  Fl_Double_Window *window;
private:
  void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
public:
  Fl_Pack *pack;
private:
  void cb_Save_i(Fl_Return_Button*, void*);
  static void cb_Save(Fl_Return_Button*, void*);
  void cb_Discard_i(Fl_Button*, void*);
  static void cb_Discard(Fl_Button*, void*);
  void cb_Del_i(Fl_Button*, Event_Editor *);
  static void cb_Del(Fl_Button*, Event_Editor *);
  void cb_Insert_i(Fl_Menu_Button*, Event_Editor *);
  static void cb_Insert(Fl_Menu_Button*, Event_Editor *);
  static Fl_Menu_Item menu_Insert[];
public:
  void sync( void );
  void update_widgets( void );
  Event_Widget * value( void );
  static void cb_changed( Fl_Widget *w, void *ee );
};
extern "C" { void event_editor( Grid *g ); }
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Slider.H>

class Event_Widget : public Fl_Group {
public:
  Event_Widget(int X, int Y, int W, int H, const char *L = 0);
private:
  static const Fl_Color note_color = FL_BLACK; 
  static const Fl_Color control_color = FL_BLUE; 
  static const Fl_Color prog_color = FL_RED; 
  static const Fl_Color pressure_color = FL_YELLOW; 
  static const Fl_Color after_color = FL_CYAN; 
  static const Fl_Color pitch_color = FL_GREEN; 
  MIDI::event *_event; 
  Fl_Group *tab; 
public:
  Fl_Value_Input *time;
private:
  void cb_time_i(Fl_Value_Input*, void*);
  static void cb_time(Fl_Value_Input*, void*);
public:
  Fl_Button *name;
private:
  void cb_name_i(Fl_Button*, void*);
  static void cb_name(Fl_Button*, void*);
public:
  Fl_Group *note_tab;
private:
  Fl_Box *note_name;
public:
  Fl_Group *after_tab;
  Fl_Group *control_tab;
  Fl_Group *prog_tab;
  Fl_Group *pitch_tab;
private:
  void cb_Pitch_i(Fl_Slider*, void *);
  static void cb_Pitch(Fl_Slider*, void *);
public:
  Fl_Group *pressure_tab;
  void ev( MIDI::event * e );
  MIDI::event * ev( void );
  void select( bool b );
  Fl_Button * button();
  bool selected( void );
  static void cb_lsb( Fl_Valuator *o, Event_Widget *w );
  static void cb_msb( Fl_Valuator *o, Event_Widget *w );
  static void cb_note( Fl_Valuator *o, Event_Widget *w );
};
#endif
