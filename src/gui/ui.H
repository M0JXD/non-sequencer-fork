//
// Copyright (C) 2008 Jonathan Moore Liles
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef ui_H
#define ui_H
#include <FL/Fl.H>
#include <FL/Fl_Dial.H>
class Fl_Scalepack;
class Fl_Sometimes_Input;
#include <Fl_Flowpack.H>
#include <FL/Fl_Overlay_Window.H>
#include <FL/Fl_Progress.H>
class Triggers;
extern Fl_Color canvas_background_color; 
extern Fl_Color velocity_colors[128]; 
#include <FL/Fl_Group.H>
#include <FL/Fl_Slider.H>

class Visual_Metronome : public Fl_Group {
public:
  Visual_Metronome(int X, int Y, int W, int H, const char *L = 0);
private:
  Fl_Slider *progress;
  int _bpb; 
  int _tpb; 
  int _beat; 
  bool _flip; 
  int _tick; 
protected:
  void draw(void);
private:
  void bpb( int b );
  void tpb( int ticks );
  void beat( int b );
  void tick( int tick );
public:
  void update( void );
};

class Overlay_Callback_Window : public Fl_Overlay_Window {
  void (*_draw_overlay_callback)(void*); 
  void *_draw_overlay_userdata; 
public:
  Overlay_Callback_Window(int X, int Y, int W, int H, const char *L=0) ;
  Overlay_Callback_Window(int W, int H, const char *L=0) ;
  virtual void draw_overlay();
  void draw_overlay_callback( void(*cb)(void*), void *v);
};
void update_transport( void * );
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Text_Editor.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Input_Choice.H>
#include <FL/Fl_Menu_Bar.H>
#include "../smf.H"
#include <FL/Fl_File_Chooser.H>
#include "../non.H"
#include <FL/Fl_Double_Window.H>

class UI {
  Fl_Text_Buffer *sequence_notes_buffer; 
  Fl_Text_Buffer *pattern_notes_buffer; 
  Fl_Text_Buffer *phrase_notes_buffer; 
public:
  UI();
  ~UI();
  void run();
  void load_settings();
  void save_settings();
protected:
  static void draw_overlay( void *v );
  void draw_overlay();
public:
  Overlay_Callback_Window* make_main_window();
  Overlay_Callback_Window *main_window;
private:
  void cb_main_window_i(Overlay_Callback_Window*, void*);
  static void cb_main_window(Overlay_Callback_Window*, void*);
  void cb_BPM_i(Fl_Value_Input*, void*);
  static void cb_BPM(Fl_Value_Input*, void*);
  void cb__i(Fl_Value_Input*, void*);
  static void cb_(Fl_Value_Input*, void*);
  void cb_1_i(Fl_Value_Input*, void*);
  static void cb_1(Fl_Value_Input*, void*);
public:
  Fl_Choice *record_mode_menu;
private:
  void cb_record_mode_menu_i(Fl_Choice*, void*);
  static void cb_record_mode_menu(Fl_Choice*, void*);
  static Fl_Menu_Item menu_record_mode_menu[];
public:
  Fl_Choice *playback_mode_menu;
  static Fl_Menu_Item menu_playback_mode_menu[];
private:
  void cb_Pattern_i(Fl_Menu_*, void*);
  static void cb_Pattern(Fl_Menu_*, void*);
  void cb_Sequence_i(Fl_Menu_*, void*);
  static void cb_Sequence(Fl_Menu_*, void*);
  void cb_Trigger_i(Fl_Menu_*, void*);
  static void cb_Trigger(Fl_Menu_*, void*);
  void cb_Queue_i(Fl_Menu_*, void*);
  static void cb_Queue(Fl_Menu_*, void*);
  void cb_Sequence1_i(Fl_Button*, void*);
  static void cb_Sequence1(Fl_Button*, void*);
  void cb_Phrase_i(Fl_Button*, void*);
  static void cb_Phrase(Fl_Button*, void*);
  void cb_Pattern1_i(Fl_Button*, void*);
  static void cb_Pattern1(Fl_Button*, void*);
public:
  Visual_Metronome *vmetro_widget;
  Fl_Scalepack *transport_controls_group;
  Fl_Button *play_button;
private:
  void cb_play_button_i(Fl_Button*, void*);
  static void cb_play_button(Fl_Button*, void*);
public:
  Fl_Button *rec_button;
private:
  void cb_rec_button_i(Fl_Button*, void*);
  static void cb_rec_button(Fl_Button*, void*);
public:
  Fl_Button *home_button;
private:
  void cb_home_button_i(Fl_Button*, void*);
  static void cb_home_button(Fl_Button*, void*);
public:
  Fl_Tabs *tabs;
private:
  void cb_tabs_i(Fl_Tabs*, void*);
  static void cb_tabs(Fl_Tabs*, void*);
public:
  Fl_Group *sequence_tab;
  Fl_Browser *playlist_browser;
  Fl_Button *sequence_phrase_delete_button;
private:
  void cb_sequence_phrase_delete_button_i(Fl_Button*, void*);
  static void cb_sequence_phrase_delete_button(Fl_Button*, void*);
public:
  Fl_Button *sequence_phrase_up_button;
private:
  void cb_sequence_phrase_up_button_i(Fl_Button*, void*);
  static void cb_sequence_phrase_up_button(Fl_Button*, void*);
public:
  Fl_Button *sequence_phrase_down_button;
private:
  void cb_sequence_phrase_down_button_i(Fl_Button*, void*);
  static void cb_sequence_phrase_down_button(Fl_Button*, void*);
public:
  Fl_Menu_Button *sequence_phrase_choice;
private:
  void cb_sequence_phrase_choice_i(Fl_Menu_Button*, void*);
  static void cb_sequence_phrase_choice(Fl_Menu_Button*, void*);
public:
  Fl_Input *sequence_name_field;
private:
  void cb_sequence_name_field_i(Fl_Input*, void*);
  static void cb_sequence_name_field(Fl_Input*, void*);
public:
  Fl_Light_Button *detach_button;
private:
  void cb_detach_button_i(Fl_Light_Button*, void*);
  static void cb_detach_button(Fl_Light_Button*, void*);
public:
  Fl_Text_Editor *sequence_notes_edit;
private:
  void cb_sequence_notes_edit_i(Fl_Text_Editor*, void*);
  static void cb_sequence_notes_edit(Fl_Text_Editor*, void*);
public:
  Triggers *triggers_widget;
  Fl_Group *progress_group;
private:
  void cb_progress_group_i(Fl_Group*, void*);
  static void cb_progress_group(Fl_Group*, void*);
public:
  Fl_Slider *phrase_progress;
  Fl_Slider *sequence_progress;
private:
  void cb_sequence_progress_i(Fl_Slider*, void*);
  static void cb_sequence_progress(Fl_Slider*, void*);
public:
  Fl_Group *phrase_tab;
  Canvas *phrase_canvas_widget;
  Fl_Group *phrase_settings_group;
  Fl_Sometimes_Input *phrase_name_field;
private:
  void cb_phrase_name_field_i(Fl_Sometimes_Input*, void*);
  static void cb_phrase_name_field(Fl_Sometimes_Input*, void*);
public:
  Fl_Light_Button *phrase_mute_button;
  Fl_Light_Button *phrase_solo_button;
  Fl_Text_Editor *phrase_notes_edit;
private:
  void cb_phrase_notes_edit_i(Fl_Text_Editor*, void*);
  static void cb_phrase_notes_edit(Fl_Text_Editor*, void*);
public:
  Fl_Value_Slider *phrase_number_spinner;
private:
  void cb_phrase_number_spinner_i(Fl_Value_Slider*, void*);
  static void cb_phrase_number_spinner(Fl_Value_Slider*, void*);
public:
  Fl_Group *pattern_tab;
  Canvas *pattern_canvas_widget;
  Fl_Group *pattern_settings_group;
  Fl_Sometimes_Input *pattern_name_field;
private:
  void cb_pattern_name_field_i(Fl_Sometimes_Input*, void*);
  static void cb_pattern_name_field(Fl_Sometimes_Input*, void*);
public:
  Fl_Light_Button *pattern_mute_button;
private:
  void cb_pattern_mute_button_i(Fl_Light_Button*, void*);
  static void cb_pattern_mute_button(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *pattern_solo_button;
private:
  void cb_pattern_solo_button_i(Fl_Light_Button*, void*);
  static void cb_pattern_solo_button(Fl_Light_Button*, void*);
public:
  Fl_Value_Slider *pattern_number_spinner;
private:
  void cb_pattern_number_spinner_i(Fl_Value_Slider*, void*);
  static void cb_pattern_number_spinner(Fl_Value_Slider*, void*);
public:
  Fl_Button *pattern_selection_mode;
private:
  void cb_pattern_selection_mode_i(Fl_Button*, void*);
  static void cb_pattern_selection_mode(Fl_Button*, void*);
public:
  Fl_Value_Slider *velocity_slider;
private:
  void cb_velocity_slider_i(Fl_Value_Slider*, void*);
  static void cb_velocity_slider(Fl_Value_Slider*, void*);
public:
  Fl_Output *mapping_text;
  Fl_Menu_Button *mapping_menu;
private:
  void cb_mapping_menu_i(Fl_Menu_Button*, void*);
  static void cb_mapping_menu(Fl_Menu_Button*, void*);
  static Fl_Menu_Item menu_mapping_menu[];
public:
  static Fl_Menu_Item *mapping_scale_menu;
  static Fl_Menu_Item *mapping_instrument_menu;
  Fl_Choice *pattern_key_combo;
private:
  void cb_pattern_key_combo_i(Fl_Choice*, void*);
  static void cb_pattern_key_combo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_pattern_key_combo[];
public:
  Fl_Choice *pattern_note_combo;
private:
  void cb_pattern_note_combo_i(Fl_Choice*, void*);
  static void cb_pattern_note_combo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_pattern_note_combo[];
public:
  Fl_Choice *pattern_res_combo;
private:
  void cb_pattern_res_combo_i(Fl_Choice*, void*);
  static void cb_pattern_res_combo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_pattern_res_combo[];
public:
  Fl_Choice *pattern_channel_choice;
private:
  void cb_pattern_channel_choice_i(Fl_Choice*, void*);
  static void cb_pattern_channel_choice(Fl_Choice*, void*);
public:
  Fl_Choice *pattern_port_choice;
private:
  void cb_pattern_port_choice_i(Fl_Choice*, void*);
  static void cb_pattern_port_choice(Fl_Choice*, void*);
public:
  Fl_Input_Choice *pattern_bars_choice;
private:
  void cb_pattern_bars_choice_i(Fl_Input_Choice*, void*);
  static void cb_pattern_bars_choice(Fl_Input_Choice*, void*);
public:
  Fl_Box *status;
  Fl_Box *transport_state;
private:
  void cb_transport_state_i(Fl_Box*, void*);
  static void cb_transport_state(Fl_Box*, void*);
public:
  Fl_Menu_Bar *menu_bar;
  static Fl_Menu_Item menu_menu_bar[];
  static Fl_Menu_Item *menu_new;
private:
  void cb_menu_new_i(Fl_Menu_*, void*);
  static void cb_menu_new(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menu_open;
private:
  void cb_menu_open_i(Fl_Menu_*, void*);
  static void cb_menu_open(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menu_save;
private:
  void cb_menu_save_i(Fl_Menu_*, void*);
  static void cb_menu_save(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menu_save_as;
private:
  void cb_menu_save_as_i(Fl_Menu_*, void*);
  static void cb_menu_save_as(Fl_Menu_*, void*);
  void cb_Import_i(Fl_Menu_*, void*);
  static void cb_Import(Fl_Menu_*, void*);
  void cb_Export_i(Fl_Menu_*, void*);
  static void cb_Export(Fl_Menu_*, void*);
  void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
  void cb_Metronome_i(Fl_Menu_*, void*);
  static void cb_Metronome(Fl_Menu_*, void*);
  void cb_Compacted_i(Fl_Menu_*, void*);
  static void cb_Compacted(Fl_Menu_*, void*);
  void cb_Follow_i(Fl_Menu_*, void*);
  static void cb_Follow(Fl_Menu_*, void*);
  void cb_Theme_i(Fl_Menu_*, void*);
  static void cb_Theme(Fl_Menu_*, void*);
  void cb_Manual_i(Fl_Menu_*, void*);
  static void cb_Manual(Fl_Menu_*, void*);
  void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *edit_menu;
private:
  void cb_Add_i(Fl_Menu_*, void*);
  static void cb_Add(Fl_Menu_*, void*);
  void cb_Previous_i(Fl_Menu_*, void*);
  static void cb_Previous(Fl_Menu_*, void*);
  void cb_Next_i(Fl_Menu_*, void*);
  static void cb_Next(Fl_Menu_*, void*);
  void cb_Duplicate_i(Fl_Menu_*, void*);
  static void cb_Duplicate(Fl_Menu_*, void*);
  void cb_Delete_i(Fl_Menu_*, void*);
  static void cb_Delete(Fl_Menu_*, void*);
  void cb_Clear_i(Fl_Menu_*, void*);
  static void cb_Clear(Fl_Menu_*, void*);
  void cb_Edit_i(Fl_Menu_*, void*);
  static void cb_Edit(Fl_Menu_*, void*);
  void cb_Select_i(Fl_Menu_*, void*);
  static void cb_Select(Fl_Menu_*, void*);
  void cb_Select1_i(Fl_Menu_*, void*);
  static void cb_Select1(Fl_Menu_*, void*);
  void cb_Invert_i(Fl_Menu_*, void*);
  static void cb_Invert(Fl_Menu_*, void*);
  void cb_Cut_i(Fl_Menu_*, void*);
  static void cb_Cut(Fl_Menu_*, void*);
  void cb_Copy_i(Fl_Menu_*, void*);
  static void cb_Copy(Fl_Menu_*, void*);
  void cb_Paste_i(Fl_Menu_*, void*);
  static void cb_Paste(Fl_Menu_*, void*);
  void cb_Undo_i(Fl_Menu_*, void*);
  static void cb_Undo(Fl_Menu_*, void*);
public:
  Fl_Button *sm_indicator;
  Fl_Double_Window* make_seq_window();
  Fl_Double_Window *seq_window;
private:
  void cb_seq_window_i(Fl_Double_Window*, void*);
  static void cb_seq_window(Fl_Double_Window*, void*);
public:
  Fl_Group *seq_detached_group;
  void update_pattern_widgets();
  void update_phrase_widgets();
  void update_sequence_widgets();
  void update_mapping_menu();
  static void update_canvas_widgets();
  static int find_numeric_menu_item( const Fl_Menu_Item *menu, int n );
  void save_dialog( const char *name );
  void show_help_dialog( const char *file );
  bool maybe_save_song();
  void switch_to_pattern( int n );
  void edit_instrument_row( Instrument *i, int n );
  Canvas* current_canvas();
};
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Return_Button.H>

class Instrument_Editor {
public:
  Instrument_Editor();
private:
  Instrument *_inst; 
  int _note; 
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *window;
private:
  void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
public:
  Fl_Input *name_field;
private:
  void cb_name_field_i(Fl_Input*, void*);
  static void cb_name_field(Fl_Input*, void*);
public:
  Fl_Value_Slider *volume_slider;
private:
  void cb_volume_slider_i(Fl_Value_Slider*, void*);
  static void cb_volume_slider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Output *note_field;
  Fl_Return_Button *done;
private:
  void cb_done_i(Fl_Return_Button*, void*);
  static void cb_done(Fl_Return_Button*, void*);
public:
  void set( Instrument *i, int n );
  void run();
};

class Trigger : public Fl_Progress {
public:
  Trigger( int X, int Y, int W, int H, const char *L =0) ;
  int handle( int m );
};
#include <FL/Fl_Dial.H>

class Triggers : public Fl_Group {
public:
  Triggers(int X, int Y, int W, int H, const char *L = 0);
private:
  unsigned long _timer; 
  int _rows; 
  void populate( void );
public:
  void update( void );
  void rows(int v);
  void draw();
};
#include <FL/Fl_Window.H>

class List_Chooser {
public:
  List_Chooser( const char *name, const char *action );
  Fl_Window *window;
  Fl_Browser *browser;
private:
  void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
public:
  Fl_Return_Button *button;
private:
  void cb_button_i(Fl_Return_Button*, void*);
  static void cb_button(Fl_Return_Button*, void*);
public:
  void show();
  bool shown();
  void add( const char *item );
};
extern "C" { void gui_status( const char *fmt, ... ); }
#endif
